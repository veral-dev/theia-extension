{"version":3,"sources":["webpack:///../node_modules/@theia/workspace/src/browser/workspace-preferences.ts","webpack:///../node_modules/@theia/workspace/src/browser/workspace-service.ts","webpack:///../node_modules/@theia/workspace/src/common/index.ts","webpack:///../node_modules/@theia/workspace/src/common/utils.ts","webpack:///../node_modules/@theia/workspace/src/common/workspace-protocol.ts","webpack:///../node_modules/webpack/buildin/module.js"],"names":[],"mappings":"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","file":"6.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces } from 'inversify';\nimport {\n    createPreferenceProxy,\n    PreferenceProxy,\n    PreferenceService,\n    PreferenceSchema,\n    PreferenceContribution\n} from '@theia/core/lib/browser/preferences';\n\nexport const workspacePreferenceSchema: PreferenceSchema = {\n    type: 'object',\n    properties: {\n        'workspace.preserveWindow': {\n            description: 'Enable opening workspaces in current window.',\n            type: 'boolean',\n            default: false\n        },\n        'workspace.supportMultiRootWorkspace': {\n            description: 'Controls whether multi-root workspace support is enabled.',\n            type: 'boolean',\n            default: true\n        }\n    }\n};\n\nexport interface WorkspaceConfiguration {\n    'workspace.preserveWindow': boolean,\n    'workspace.supportMultiRootWorkspace': boolean\n}\n\nexport const WorkspacePreferences = Symbol('WorkspacePreferences');\nexport type WorkspacePreferences = PreferenceProxy<WorkspaceConfiguration>;\n\nexport function createWorkspacePreferences(preferences: PreferenceService): WorkspacePreferences {\n    return createPreferenceProxy(preferences, workspacePreferenceSchema);\n}\n\nexport function bindWorkspacePreferences(bind: interfaces.Bind): void {\n    bind(WorkspacePreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        return createWorkspacePreferences(preferences);\n    }).inSingletonScope();\n\n    bind(PreferenceContribution).toConstantValue({ schema: workspacePreferenceSchema });\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, postConstruct } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { WorkspaceServer, THEIA_EXT, VSCODE_EXT, getTemporaryWorkspaceFileUri } from '../common';\nimport { WindowService } from '@theia/core/lib/browser/window/window-service';\nimport {\n    FrontendApplicationContribution, PreferenceServiceImpl, PreferenceScope, PreferenceSchemaProvider, LabelProvider\n} from '@theia/core/lib/browser';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { ILogger, Disposable, DisposableCollection, Emitter, Event, MaybePromise, MessageService } from '@theia/core';\nimport { WorkspacePreferences } from './workspace-preferences';\nimport * as jsoncparser from 'jsonc-parser';\nimport * as Ajv from 'ajv';\nimport { FrontendApplicationConfigProvider } from '@theia/core/lib/browser/frontend-application-config-provider';\nimport { FileStat, BaseStat } from '@theia/filesystem/lib/common/files';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { FileSystemPreferences } from '@theia/filesystem/lib/browser';\n\n/**\n * The workspace service.\n */\n@injectable()\nexport class WorkspaceService implements FrontendApplicationContribution {\n\n    private _workspace: FileStat | undefined;\n\n    private _roots: FileStat[] = [];\n    private deferredRoots = new Deferred<FileStat[]>();\n\n    @inject(FileService)\n    protected readonly fileService: FileService;\n\n    @inject(WorkspaceServer)\n    protected readonly server: WorkspaceServer;\n\n    @inject(WindowService)\n    protected readonly windowService: WindowService;\n\n    @inject(ILogger)\n    protected logger: ILogger;\n\n    @inject(WorkspacePreferences)\n    protected preferences: WorkspacePreferences;\n\n    @inject(PreferenceServiceImpl)\n    protected readonly preferenceImpl: PreferenceServiceImpl;\n\n    @inject(PreferenceSchemaProvider)\n    protected readonly schemaProvider: PreferenceSchemaProvider;\n\n    @inject(EnvVariablesServer)\n    protected readonly envVariableServer: EnvVariablesServer;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n\n    @inject(FileSystemPreferences)\n    protected readonly fsPreferences: FileSystemPreferences;\n\n    protected applicationName: string;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this.applicationName = FrontendApplicationConfigProvider.get().applicationName;\n        const wsUriString = await this.getDefaultWorkspaceUri();\n        const wsStat = await this.toFileStat(wsUriString);\n        await this.setWorkspace(wsStat);\n\n        this.fileService.onDidFilesChange(event => {\n            if (this._workspace && this._workspace.isFile && event.contains(this._workspace.resource)) {\n                this.updateWorkspace();\n            }\n        });\n        this.preferences.onPreferenceChanged(event => {\n            if (event.preferenceName === 'workspace.supportMultiRootWorkspace') {\n                this.updateWorkspace();\n            }\n        });\n        this.fsPreferences.onPreferenceChanged(e => {\n            if (e.preferenceName === 'files.watcherExclude') {\n                this.refreshRootWatchers();\n            }\n        });\n    }\n\n    /**\n     * Resolves to the default workspace URI as string.\n     *\n     * The default implementation tries to extract the default workspace location\n     * from the `window.location.hash`, then falls-back to the most recently\n     * used workspace root from the server.\n     *\n     * It is not ensured that the resolved workspace URI is valid, it can point\n     * to a non-existing location.\n     */\n    protected getDefaultWorkspaceUri(): MaybePromise<string | undefined> {\n        return this.doGetDefaultWorkspaceUri();\n    }\n\n    protected async doGetDefaultWorkspaceUri(): Promise<string | undefined> {\n        // Prefer the workspace path specified as the URL fragment, if present.\n        if (window.location.hash.length > 1) {\n            // Remove the leading # and decode the URI.\n            const wpPath = decodeURI(window.location.hash.substring(1));\n            const workspaceUri = new URI().withPath(wpPath).withScheme('file');\n            let workspaceStat: FileStat | undefined;\n            try {\n                workspaceStat = await this.fileService.resolve(workspaceUri);\n            } catch { }\n            if (workspaceStat && !workspaceStat.isDirectory && !this.isWorkspaceFile(workspaceStat)) {\n                this.messageService.error(`Not a valid workspace file: ${workspaceUri}`);\n                return undefined;\n            }\n            return workspaceUri.toString();\n        } else {\n            // Else, ask the server for its suggested workspace (usually the one\n            // specified on the CLI, or the most recent).\n            return this.server.getMostRecentlyUsedWorkspace();\n        }\n    }\n\n    /**\n     * Get the path of the workspace to use initially.\n     * @deprecated use `WorkspaceService#getDefaultWorkspaceUri` instead.\n     */\n    protected getDefaultWorkspacePath(): MaybePromise<string | undefined> {\n        return this.getDefaultWorkspaceUri();\n    }\n\n    /**\n     * Set the URL fragment to the given workspace path.\n     */\n    protected setURLFragment(workspacePath: string): void {\n        window.location.hash = workspacePath;\n    }\n\n    get roots(): Promise<FileStat[]> {\n        return this.deferredRoots.promise;\n    }\n    tryGetRoots(): FileStat[] {\n        return this._roots;\n    }\n    get workspace(): FileStat | undefined {\n        return this._workspace;\n    }\n\n    protected readonly onWorkspaceChangeEmitter = new Emitter<FileStat[]>();\n    get onWorkspaceChanged(): Event<FileStat[]> {\n        return this.onWorkspaceChangeEmitter.event;\n    }\n\n    protected readonly onWorkspaceLocationChangedEmitter = new Emitter<FileStat | undefined>();\n    get onWorkspaceLocationChanged(): Event<FileStat | undefined> {\n        return this.onWorkspaceLocationChangedEmitter.event;\n    }\n\n    protected readonly toDisposeOnWorkspace = new DisposableCollection();\n    protected async setWorkspace(workspaceStat: FileStat | undefined): Promise<void> {\n        if (this._workspace && workspaceStat &&\n            this._workspace.resource === workspaceStat.resource &&\n            this._workspace.mtime === workspaceStat.mtime &&\n            this._workspace.etag === workspaceStat.etag &&\n            this._workspace.size === workspaceStat.size) {\n            return;\n        }\n        this.toDisposeOnWorkspace.dispose();\n        this._workspace = workspaceStat;\n        if (this._workspace) {\n            const uri = this._workspace.resource;\n            if (this._workspace.isFile) {\n                this.toDisposeOnWorkspace.push(this.fileService.watch(uri));\n            }\n            this.setURLFragment(uri.path.toString());\n        } else {\n            this.setURLFragment('');\n        }\n        this.updateTitle();\n        await this.updateWorkspace();\n    }\n\n    protected async updateWorkspace(): Promise<void> {\n        await this.updateRoots();\n        this.watchRoots();\n    }\n\n    protected async updateRoots(): Promise<void> {\n        const newRoots = await this.computeRoots();\n        let rootsChanged = false;\n        if (newRoots.length !== this._roots.length || newRoots.length === 0) {\n            rootsChanged = true;\n        } else {\n            for (const newRoot of newRoots) {\n                if (!this._roots.some(r => r.resource.toString() === newRoot.resource.toString())) {\n                    rootsChanged = true;\n                    break;\n                }\n            }\n        }\n        if (rootsChanged) {\n            this._roots = newRoots;\n            this.deferredRoots.resolve(this._roots); // in order to resolve first\n            this.deferredRoots = new Deferred<FileStat[]>();\n            this.deferredRoots.resolve(this._roots);\n            this.onWorkspaceChangeEmitter.fire(this._roots);\n        }\n    }\n\n    protected async computeRoots(): Promise<FileStat[]> {\n        const roots: FileStat[] = [];\n        if (this._workspace) {\n            if (this._workspace.isDirectory) {\n                return [this._workspace];\n            }\n\n            const workspaceData = await this.getWorkspaceDataFromFile();\n            if (workspaceData) {\n                for (const { path } of workspaceData.folders) {\n                    const valid = await this.toValidRoot(path);\n                    if (valid) {\n                        roots.push(valid);\n                    } else {\n                        roots.push(FileStat.dir(path));\n                    }\n                }\n            }\n        }\n        return roots;\n    }\n\n    protected async getWorkspaceDataFromFile(): Promise<WorkspaceData | undefined> {\n        if (this._workspace && await this.fileService.exists(this._workspace.resource)) {\n            if (this._workspace.isDirectory) {\n                return {\n                    folders: [{ path: this._workspace.resource.toString() }]\n                };\n            } else if (this.isWorkspaceFile(this._workspace)) {\n                const stat = await this.fileService.read(this._workspace.resource);\n                const strippedContent = jsoncparser.stripComments(stat.value);\n                const data = jsoncparser.parse(strippedContent);\n                if (data && WorkspaceData.is(data)) {\n                    return WorkspaceData.transformToAbsolute(data, stat);\n                }\n                this.logger.error(`Unable to retrieve workspace data from the file: '${this.labelProvider.getLongName(this._workspace)}'. Please check if the file is corrupted.`);\n            } else {\n                this.logger.warn(`Not a valid workspace file: ${this.labelProvider.getLongName(this._workspace)}`);\n            }\n        }\n    }\n\n    protected formatTitle(title?: string): string {\n        const name = this.applicationName;\n        return title ? `${title} — ${name}` : name;\n    }\n\n    protected updateTitle(): void {\n        let title: string | undefined;\n        if (this._workspace) {\n            const displayName = this._workspace.name;\n            if (!this._workspace.isDirectory &&\n                (displayName.endsWith(`.${THEIA_EXT}`) || displayName.endsWith(`.${VSCODE_EXT}`))) {\n                title = displayName.slice(0, displayName.lastIndexOf('.'));\n            } else {\n                title = displayName;\n            }\n        }\n        document.title = this.formatTitle(title);\n    }\n\n    /**\n     * on unload, we set our workspace root as the last recently used on the backend.\n     */\n    onStop(): void {\n        this.server.setMostRecentlyUsedWorkspace(this._workspace ? this._workspace.resource.toString() : '');\n    }\n\n    async recentWorkspaces(): Promise<string[]> {\n        return this.server.getRecentWorkspaces();\n    }\n\n    /**\n     * Returns `true` if theia has an opened workspace or folder\n     * @returns {boolean}\n     */\n    get opened(): boolean {\n        return !!this._workspace;\n    }\n\n    /**\n     * Returns `true` if a multiple-root workspace is currently open.\n     * @returns {boolean}\n     */\n    get isMultiRootWorkspaceOpened(): boolean {\n        return !!this.workspace && !this.workspace.isDirectory;\n    }\n\n    /**\n     * Returns `true` if there is an opened workspace, and multi root workspace support is enabled.\n     * @returns {boolean}\n     */\n    get isMultiRootWorkspaceEnabled(): boolean {\n        return this.opened && this.preferences['workspace.supportMultiRootWorkspace'];\n    }\n\n    /**\n     * Opens directory, or recreates a workspace from the file that `uri` points to.\n     */\n    open(uri: URI, options?: WorkspaceInput): void {\n        this.doOpen(uri, options);\n    }\n\n    protected async doOpen(uri: URI, options?: WorkspaceInput): Promise<void> {\n        const rootUri = uri.toString();\n        const stat = await this.toFileStat(rootUri);\n        if (stat) {\n            if (!stat.isDirectory && !this.isWorkspaceFile(stat)) {\n                const message = `Not a valid workspace file: ${uri}`;\n                this.messageService.error(message);\n                throw new Error(message);\n            }\n            // The same window has to be preserved too (instead of opening a new one), if the workspace root is not yet available and we are setting it for the first time.\n            // Option passed as parameter has the highest priority (for api developers), then the preference, then the default.\n            await this.roots;\n            const { preserveWindow } = {\n                preserveWindow: this.preferences['workspace.preserveWindow'] || !this.opened,\n                ...options\n            };\n            await this.server.setMostRecentlyUsedWorkspace(rootUri);\n            if (preserveWindow) {\n                this._workspace = stat;\n            }\n            this.openWindow(stat, { preserveWindow });\n            return;\n        }\n        throw new Error('Invalid workspace root URI. Expected an existing directory location.');\n    }\n\n    /**\n     * Adds a root folder to the workspace\n     * @param uri URI of the root folder being added\n     */\n    async addRoot(uri: URI): Promise<void> {\n        await this.spliceRoots(this._roots.length, 0, uri);\n    }\n\n    /**\n     * Removes root folder(s) from workspace.\n     */\n    async removeRoots(uris: URI[]): Promise<void> {\n        if (!this.opened) {\n            throw new Error('Folder cannot be removed as there is no active folder in the current workspace.');\n        }\n        if (this._workspace) {\n            const workspaceData = await this.getWorkspaceDataFromFile();\n            this._workspace = await this.writeWorkspaceFile(this._workspace,\n                WorkspaceData.buildWorkspaceData(\n                    this._roots.filter(root => uris.findIndex(u => u.toString() === root.resource.toString()) < 0),\n                    workspaceData!.settings\n                )\n            );\n        }\n    }\n\n    async spliceRoots(start: number, deleteCount?: number, ...rootsToAdd: URI[]): Promise<URI[]> {\n        if (!this._workspace) {\n            throw new Error('There is not active workspace');\n        }\n        const dedup = new Set<string>();\n        const roots = this._roots.map(root => (dedup.add(root.resource.toString()), root.resource.toString()));\n        const toAdd: string[] = [];\n        for (const root of rootsToAdd) {\n            const uri = root.toString();\n            if (!dedup.has(uri)) {\n                dedup.add(uri);\n                toAdd.push(uri);\n            }\n        }\n        const toRemove = roots.splice(start, deleteCount || 0, ...toAdd);\n        if (!toRemove.length && !toAdd.length) {\n            return [];\n        }\n        if (this._workspace.isDirectory) {\n            const untitledWorkspace = await this.getUntitledWorkspace();\n            await this.save(untitledWorkspace);\n        }\n        const currentData = await this.getWorkspaceDataFromFile();\n        const newData = WorkspaceData.buildWorkspaceData(roots, currentData && currentData.settings);\n        await this.writeWorkspaceFile(this._workspace, newData);\n        return toRemove.map(root => new URI(root));\n    }\n\n    async getUntitledWorkspace(): Promise<URI> {\n        return getTemporaryWorkspaceFileUri(this.envVariableServer);\n    }\n\n    private async writeWorkspaceFile(workspaceFile: FileStat | undefined, workspaceData: WorkspaceData): Promise<FileStat | undefined> {\n        if (workspaceFile) {\n            const data = JSON.stringify(WorkspaceData.transformToRelative(workspaceData, workspaceFile));\n            const edits = jsoncparser.format(data, undefined, { tabSize: 3, insertSpaces: true, eol: '' });\n            const result = jsoncparser.applyEdits(data, edits);\n            await this.fileService.write(workspaceFile.resource, result);\n            return this.fileService.resolve(workspaceFile.resource);\n        }\n    }\n\n    /**\n     * Clears current workspace root.\n     */\n    async close(): Promise<void> {\n        this._workspace = undefined;\n        this._roots.length = 0;\n\n        await this.server.setMostRecentlyUsedWorkspace('');\n        this.reloadWindow();\n    }\n\n    /**\n     * returns a FileStat if the argument URI points to an existing directory. Otherwise, `undefined`.\n     */\n    protected async toValidRoot(uri: URI | string | undefined): Promise<FileStat | undefined> {\n        const fileStat = await this.toFileStat(uri);\n        if (fileStat && fileStat.isDirectory) {\n            return fileStat;\n        }\n        return undefined;\n    }\n\n    /**\n     * returns a FileStat if the argument URI points to a file or directory. Otherwise, `undefined`.\n     */\n    protected async toFileStat(uri: URI | string | undefined): Promise<FileStat | undefined> {\n        if (!uri) {\n            return undefined;\n        }\n        let uriStr = uri.toString();\n        try {\n            if (uriStr.endsWith('/')) {\n                uriStr = uriStr.slice(0, -1);\n            }\n            const normalizedUri = new URI(uriStr).normalizePath();\n            return await this.fileService.resolve(normalizedUri);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    protected openWindow(uri: FileStat, options?: WorkspaceInput): void {\n        const workspacePath = uri.resource.path.toString();\n\n        if (this.shouldPreserveWindow(options)) {\n            this.reloadWindow();\n        } else {\n            try {\n                this.openNewWindow(workspacePath);\n            } catch (error) {\n                // Fall back to reloading the current window in case the browser has blocked the new window\n                this._workspace = uri;\n                this.logger.error(error.toString()).then(() => this.reloadWindow());\n            }\n        }\n    }\n\n    protected reloadWindow(): void {\n        // Set the new workspace path as the URL fragment.\n        if (this._workspace !== undefined) {\n            this.setURLFragment(this._workspace.resource.path.toString());\n        } else {\n            this.setURLFragment('');\n        }\n\n        window.location.reload(true);\n    }\n\n    protected openNewWindow(workspacePath: string): void {\n        const url = new URL(window.location.href);\n        url.hash = workspacePath;\n        this.windowService.openNewWindow(url.toString());\n    }\n\n    protected shouldPreserveWindow(options?: WorkspaceInput): boolean {\n        return options !== undefined && !!options.preserveWindow;\n    }\n\n    /**\n     * Return true if one of the paths in paths array is present in the workspace\n     * NOTE: You should always explicitly use `/` as the separator between the path segments.\n     */\n    async containsSome(paths: string[]): Promise<boolean> {\n        await this.roots;\n        if (this.opened) {\n            for (const root of this._roots) {\n                const uri = root.resource;\n                for (const path of paths) {\n                    const fileUri = uri.resolve(path);\n                    const exists = await this.fileService.exists(fileUri);\n                    if (exists) {\n                        return exists;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    get saved(): boolean {\n        return !!this._workspace && !this._workspace.isDirectory;\n    }\n\n    /**\n     * Save workspace data into a file\n     * @param uri URI or FileStat of the workspace file\n     */\n    async save(uri: URI | FileStat): Promise<void> {\n        const resource = uri instanceof URI ? uri : uri.resource;\n        if (!await this.fileService.exists(resource)) {\n            await this.fileService.create(resource);\n        }\n        const workspaceData: WorkspaceData = { folders: [], settings: {} };\n        if (!this.saved) {\n            for (const p of Object.keys(this.schemaProvider.getCombinedSchema().properties)) {\n                if (this.schemaProvider.isValidInScope(p, PreferenceScope.Folder)) {\n                    continue;\n                }\n                const preferences = this.preferenceImpl.inspect(p);\n                if (preferences && preferences.workspaceValue) {\n                    workspaceData.settings![p] = preferences.workspaceValue;\n                }\n            }\n        }\n        let stat = await this.toFileStat(resource);\n        Object.assign(workspaceData, await this.getWorkspaceDataFromFile());\n        stat = await this.writeWorkspaceFile(stat, WorkspaceData.buildWorkspaceData(this._roots, workspaceData ? workspaceData.settings : undefined));\n        await this.server.setMostRecentlyUsedWorkspace(resource.toString());\n        await this.setWorkspace(stat);\n        this.onWorkspaceLocationChangedEmitter.fire(stat);\n    }\n\n    protected readonly rootWatchers = new Map<string, Disposable>();\n\n    protected async watchRoots(): Promise<void> {\n        const rootUris = new Set(this._roots.map(r => r.resource.toString()));\n        for (const [uri, watcher] of this.rootWatchers.entries()) {\n            if (!rootUris.has(uri)) {\n                watcher.dispose();\n            }\n        }\n        for (const root of this._roots) {\n            this.watchRoot(root);\n        }\n    }\n\n    protected async refreshRootWatchers(): Promise<void> {\n        for (const watcher of this.rootWatchers.values()) {\n            watcher.dispose();\n        }\n        await this.watchRoots();\n    }\n\n    protected async watchRoot(root: FileStat): Promise<void> {\n        const uriStr = root.resource.toString();\n        if (this.rootWatchers.has(uriStr)) {\n            return;\n        }\n        const excludes = this.getExcludes(uriStr);\n        const watcher = this.fileService.watch(new URI(uriStr), {\n            recursive: true,\n            excludes\n        });\n        this.rootWatchers.set(uriStr, new DisposableCollection(\n            watcher,\n            Disposable.create(() => this.rootWatchers.delete(uriStr))\n        ));\n    }\n\n    protected getExcludes(uri: string): string[] {\n        const patterns = this.fsPreferences.get('files.watcherExclude', undefined, uri);\n        return Object.keys(patterns).filter(pattern => patterns[pattern]);\n    }\n\n    /**\n     * Returns the workspace root uri that the given file belongs to.\n     * In case that the file is found in more than one workspace roots, returns the root that is closest to the file.\n     * If the file is not from the current workspace, returns `undefined`.\n     * @param uri URI of the file\n     */\n    getWorkspaceRootUri(uri: URI | undefined): URI | undefined {\n        if (!uri) {\n            const root = this.tryGetRoots()[0];\n            if (root) {\n                return root.resource;\n            }\n            return undefined;\n        }\n        const rootUris: URI[] = [];\n        for (const root of this.tryGetRoots()) {\n            const rootUri = root.resource;\n            if (rootUri && rootUri.isEqualOrParent(uri)) {\n                rootUris.push(rootUri);\n            }\n        }\n        return rootUris.sort((r1, r2) => r2.toString().length - r1.toString().length)[0];\n    }\n\n    areWorkspaceRoots(uris: URI[]): boolean {\n        if (!uris.length) {\n            return false;\n        }\n        const rootUris = new Set(this.tryGetRoots().map(root => root.resource.toString()));\n        return uris.every(uri => rootUris.has(uri.toString()));\n    }\n\n    /**\n     * Check if the file should be considered as a workspace file.\n     *\n     * Example: We should not try to read the contents of an .exe file.\n     */\n    protected isWorkspaceFile(fileStat: FileStat): boolean {\n        return fileStat.resource.path.ext === `.${THEIA_EXT}` || fileStat.resource.path.ext === `.${VSCODE_EXT}`;\n    }\n\n}\n\nexport interface WorkspaceInput {\n\n    /**\n     * Tests whether the same window should be used or a new one has to be opened after setting the workspace root. By default it is `false`.\n     */\n    preserveWindow?: boolean;\n\n}\n\nexport interface WorkspaceData {\n    folders: Array<{ path: string, name?: string }>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    settings?: { [id: string]: any };\n}\n\nexport namespace WorkspaceData {\n    const validateSchema = new Ajv().compile({\n        type: 'object',\n        properties: {\n            folders: {\n                description: 'Root folders in the workspace',\n                type: 'array',\n                items: {\n                    type: 'object',\n                    properties: {\n                        path: {\n                            type: 'string',\n                        }\n                    },\n                    required: ['path']\n                }\n            },\n            settings: {\n                description: 'Workspace preferences',\n                type: 'object'\n            }\n        },\n        required: ['folders']\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    export function is(data: any): data is WorkspaceData {\n        return !!validateSchema(data);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    export function buildWorkspaceData(folders: string[] | FileStat[], settings: { [id: string]: any } | undefined): WorkspaceData {\n        let roots: string[] = [];\n        if (folders.length > 0) {\n            if (typeof folders[0] !== 'string') {\n                roots = (<FileStat[]>folders).map(folder => folder.resource.toString());\n            } else {\n                roots = <string[]>folders;\n            }\n        }\n        const data: WorkspaceData = {\n            folders: roots.map(folder => ({ path: folder }))\n        };\n        if (settings) {\n            data.settings = settings;\n        }\n        return data;\n    }\n\n    export function transformToRelative(data: WorkspaceData, workspaceFile?: FileStat): WorkspaceData {\n        const folderUris: string[] = [];\n        const workspaceFileUri = new URI(workspaceFile ? workspaceFile.resource.toString() : '').withScheme('file');\n        for (const { path } of data.folders) {\n            const folderUri = new URI(path).withScheme('file');\n            const rel = workspaceFileUri.parent.relative(folderUri);\n            if (rel) {\n                folderUris.push(rel.toString());\n            } else {\n                folderUris.push(folderUri.toString());\n            }\n        }\n        return buildWorkspaceData(folderUris, data.settings);\n    }\n\n    export function transformToAbsolute(data: WorkspaceData, workspaceFile?: BaseStat): WorkspaceData {\n        if (workspaceFile) {\n            const folders: string[] = [];\n            for (const folder of data.folders) {\n                const path = folder.path;\n                if (path.startsWith('file:///')) {\n                    folders.push(path);\n                } else {\n                    folders.push(workspaceFile.resource.withScheme('file').parent.resolve(path).toString());\n                }\n\n            }\n            return Object.assign(data, buildWorkspaceData(folders, data.settings));\n        }\n        return data;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './workspace-protocol';\nexport * from './utils';\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n// TODO get rid of util files, replace with methods in a responsible class\n\nimport URI from '@theia/core/lib/common/uri';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\n\nexport const THEIA_EXT = 'theia-workspace';\nexport const VSCODE_EXT = 'code-workspace';\n\n/**\n * @deprecated since 1.4.0 - because of https://github.com/eclipse-theia/theia/wiki/Coding-Guidelines#di-function-export, use `WorkspaceService.getUntitledWorkspace` instead\n */\nexport async function getTemporaryWorkspaceFileUri(envVariableServer: EnvVariablesServer): Promise<URI> {\n    const configDirUri = await envVariableServer.getConfigDirUri();\n    return new URI(configDirUri).resolve(`Untitled.${THEIA_EXT}`);\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport const workspacePath = '/services/workspace';\n\n/**\n * The JSON-RPC workspace interface.\n */\nexport const WorkspaceServer = Symbol('WorkspaceServer');\nexport interface WorkspaceServer {\n\n    /**\n     * Returns with a promise that resolves to the most recently used workspace folder URI as a string.\n     * Resolves to `undefined` if the workspace folder is not yet set.\n     */\n    getMostRecentlyUsedWorkspace(): Promise<string | undefined>;\n\n    /**\n     * Sets the desired string representation of the URI as the most recently used workspace folder.\n     */\n    setMostRecentlyUsedWorkspace(uri: string): Promise<void>;\n\n    /**\n     * Returns list of recently opened workspaces as an array.\n     */\n    getRecentWorkspaces(): Promise<string[]>\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}