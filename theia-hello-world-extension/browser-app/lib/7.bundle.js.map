{"version":3,"sources":["webpack:///../node_modules/@theia/core/src/common/selection-command-handler.ts","webpack:///../node_modules/@theia/filesystem/src/browser/file-selection.ts","webpack:///../node_modules/@theia/filesystem/src/browser/filesystem-frontend-contribution.ts","webpack:///../node_modules/@theia/filesystem/src/common/filesystem.ts"],"names":[],"mappings":"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","file":"7.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { CommandHandler } from './command';\nimport { SelectionService } from '../common/selection-service';\n\nexport class SelectionCommandHandler<S> implements CommandHandler {\n\n    constructor(\n        protected readonly selectionService: SelectionService,\n        protected readonly toSelection: (arg: any) => S | undefined,\n        protected readonly options: SelectionCommandHandler.Options<S>\n    ) { }\n\n    execute(...args: any[]): Object | undefined {\n        const selection = this.getSelection(...args);\n        return selection ? (this.options.execute as any)(selection, ...args) : undefined;\n    }\n\n    isVisible(...args: any[]): boolean {\n        const selection = this.getSelection(...args);\n        return !!selection && (!this.options.isVisible || (this.options.isVisible as any)(selection as any, ...args));\n    }\n\n    isEnabled(...args: any[]): boolean {\n        const selection = this.getSelection(...args);\n        return !!selection && (!this.options.isEnabled || (this.options.isEnabled as any)(selection as any, ...args));\n    }\n\n    protected isMulti(): boolean {\n        return this.options && !!this.options.multi;\n    }\n\n    protected getSelection(...args: any[]): S | S[] | undefined {\n        const givenSelection = args.length && this.toSelection(args[0]);\n        if (givenSelection) {\n            return this.isMulti() ? [givenSelection] : givenSelection;\n        }\n        const globalSelection = this.getSingleSelection(this.selectionService.selection);\n        if (this.isMulti()) {\n            return this.getMultiSelection(globalSelection);\n        }\n        return this.getSingleSelection(globalSelection);\n    }\n\n    protected getSingleSelection(arg: Object | undefined): S | undefined {\n        let selection = this.toSelection(arg);\n        if (selection) {\n            return selection;\n        }\n        if (Array.isArray(arg)) {\n            for (const element of arg) {\n                selection = this.toSelection(element);\n                if (selection) {\n                    return selection;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    protected getMultiSelection(arg: Object | undefined): S[] | undefined {\n        let selection = this.toSelection(arg);\n        if (selection) {\n            return [selection];\n        }\n        const result = [];\n        if (Array.isArray(arg)) {\n            for (const element of arg) {\n                selection = this.toSelection(element);\n                if (selection) {\n                    result.push(selection);\n                }\n            }\n        }\n        return result.length ? result : undefined;\n    }\n}\nexport namespace SelectionCommandHandler {\n    export type Options<S> = SelectionOptions<false, S> | SelectionOptions<true, S[]>;\n    export interface SelectionOptions<Multi extends boolean, T> {\n        multi: Multi;\n        execute(selection: T, ...args: any[]): any;\n        isEnabled?(selection: T, ...args: any[]): boolean;\n        isVisible?(selection: T, ...args: any[]): boolean;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { SelectionService } from '@theia/core/lib/common/selection-service';\nimport { SelectionCommandHandler } from '@theia/core/lib/common/selection-command-handler';\nimport { FileStat } from '../common/files';\n\nexport interface FileSelection {\n    fileStat: FileStat\n}\nexport namespace FileSelection {\n    export function is(arg: Object | undefined): arg is FileSelection {\n        return typeof arg === 'object' && ('fileStat' in arg) && FileStat.is(arg['fileStat']);\n    }\n    export class CommandHandler extends SelectionCommandHandler<FileSelection> {\n\n        constructor(\n            protected readonly selectionService: SelectionService,\n            protected readonly options: SelectionCommandHandler.Options<FileSelection>\n        ) {\n            super(\n                selectionService,\n                arg => FileSelection.is(arg) ? arg : undefined,\n                options\n            );\n        }\n\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { environment } from '@theia/application-package/lib/environment';\nimport { MaybePromise, SelectionService, isCancelled } from '@theia/core/lib/common';\nimport { Command, CommandContribution, CommandRegistry } from '@theia/core/lib/common/command';\nimport {\n    FrontendApplicationContribution, ApplicationShell,\n    NavigatableWidget, NavigatableWidgetOptions,\n    Saveable, WidgetManager, StatefulWidget, FrontendApplication, ExpandableTreeNode, waitForClosed\n} from '@theia/core/lib/browser';\nimport { MimeService } from '@theia/core/lib/browser/mime-service';\nimport { TreeWidgetSelection } from '@theia/core/lib/browser/tree/tree-widget-selection';\nimport { FileSystemPreferences } from './filesystem-preferences';\nimport { FileSelection } from './file-selection';\nimport { FileUploadService } from './file-upload-service';\nimport { FileService, UserFileOperationEvent } from './file-service';\nimport { FileChangesEvent, FileChangeType, FileOperation } from '../common/files';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\n\nexport namespace FileSystemCommands {\n\n    export const UPLOAD: Command = {\n        id: 'file.upload',\n        category: 'File',\n        label: 'Upload Files...'\n    };\n\n}\n\nexport interface NavigatableWidgetMoveSnapshot {\n    dirty?: object,\n    view?: object\n}\n\n@injectable()\nexport class FileSystemFrontendContribution implements FrontendApplicationContribution, CommandContribution {\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    @inject(WidgetManager)\n    protected readonly widgetManager: WidgetManager;\n\n    @inject(MimeService)\n    protected readonly mimeService: MimeService;\n\n    @inject(FileSystemPreferences)\n    protected readonly preferences: FileSystemPreferences;\n\n    @inject(SelectionService)\n    protected readonly selectionService: SelectionService;\n\n    @inject(FileUploadService)\n    protected readonly uploadService: FileUploadService;\n\n    @inject(FileService)\n    protected readonly fileService: FileService;\n\n    protected readonly userOperations = new Map<number, Deferred<void>>();\n    protected queueUserOperation(event: UserFileOperationEvent): void {\n        const moveOperation = new Deferred<void>();\n        this.userOperations.set(event.correlationId, moveOperation);\n        this.run(() => moveOperation.promise);\n    }\n    protected resolveUserOperation(event: UserFileOperationEvent): void {\n        const operation = this.userOperations.get(event.correlationId);\n        if (operation) {\n            this.userOperations.delete(event.correlationId);\n            operation.resolve();\n        }\n    }\n\n    initialize(): void {\n        this.fileService.onDidFilesChange(event => this.run(() => this.updateWidgets(event)));\n        this.fileService.onWillRunUserOperation(event => {\n            this.queueUserOperation(event);\n            event.waitUntil(this.runEach((uri, widget) => this.pushMove(uri, widget, event)));\n        });\n        this.fileService.onDidFailUserOperation(event => event.waitUntil((async () => {\n            await this.runEach((uri, widget) => this.revertMove(uri, widget, event));\n            this.resolveUserOperation(event);\n        })()));\n        this.fileService.onDidRunUserOperation(event => event.waitUntil((async () => {\n            await this.runEach((uri, widget) => this.applyMove(uri, widget, event));\n            this.resolveUserOperation(event);\n        })()));\n    }\n\n    onStart?(app: FrontendApplication): MaybePromise<void> {\n        this.updateAssociations();\n        this.preferences.onPreferenceChanged(e => {\n            if (e.preferenceName === 'files.associations') {\n                this.updateAssociations();\n            }\n        });\n    }\n\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(FileSystemCommands.UPLOAD, new FileSelection.CommandHandler(this.selectionService, {\n            multi: false,\n            isEnabled: selection => this.canUpload(selection),\n            isVisible: selection => this.canUpload(selection),\n            execute: selection => this.upload(selection)\n        }));\n    }\n\n    protected canUpload({ fileStat }: FileSelection): boolean {\n        return !environment.electron.is() && fileStat.isDirectory;\n    }\n\n    protected async upload(selection: FileSelection): Promise<void> {\n        try {\n            const source = TreeWidgetSelection.getSource(this.selectionService.selection);\n            await this.uploadService.upload(selection.fileStat.resource);\n            if (ExpandableTreeNode.is(selection) && source) {\n                await source.model.expandNode(selection);\n            }\n        } catch (e) {\n            if (!isCancelled(e)) {\n                console.error(e);\n            }\n        }\n    }\n\n    protected pendingOperation = Promise.resolve();\n    protected run(operation: () => MaybePromise<void>): Promise<void> {\n        return this.pendingOperation = this.pendingOperation.then(async () => {\n            try {\n                await operation();\n            } catch (e) {\n                console.error(e);\n            }\n        });\n    }\n\n    protected async runEach(participant: (resourceUri: URI, widget: NavigatableWidget) => Promise<void>): Promise<void> {\n        const promises: Promise<void>[] = [];\n        for (const [resourceUri, widget] of NavigatableWidget.get(this.shell.widgets)) {\n            promises.push(participant(resourceUri, widget));\n        }\n        await Promise.all(promises);\n    }\n\n    protected readonly moveSnapshots = new Map<string, NavigatableWidgetMoveSnapshot>();\n\n    protected popMoveSnapshot(resourceUri: URI): NavigatableWidgetMoveSnapshot | undefined {\n        const snapshotKey = resourceUri.toString();\n        const snapshot = this.moveSnapshots.get(snapshotKey);\n        if (snapshot) {\n            this.moveSnapshots.delete(snapshotKey);\n        }\n        return snapshot;\n    }\n\n    protected applyMoveSnapshot(widget: NavigatableWidget, snapshot: NavigatableWidgetMoveSnapshot | undefined): void {\n        if (!snapshot) {\n            return undefined;\n        }\n        if (snapshot.dirty) {\n            const saveable = Saveable.get(widget);\n            if (saveable && saveable.applySnapshot) {\n                saveable.applySnapshot(snapshot.dirty);\n            }\n        }\n        if (snapshot.view && StatefulWidget.is(widget)) {\n            widget.restoreState(snapshot.view);\n        }\n    }\n\n    protected async pushMove(resourceUri: URI, widget: NavigatableWidget, event: UserFileOperationEvent): Promise<void> {\n        const newResourceUri = this.createMoveToUri(resourceUri, widget, event);\n        if (!newResourceUri) {\n            return;\n        }\n        const snapshot: NavigatableWidgetMoveSnapshot = {};\n        const saveable = Saveable.get(widget);\n        if (StatefulWidget.is(widget)) {\n            snapshot.view = widget.storeState();\n        }\n        if (saveable && saveable.dirty) {\n            if (saveable.createSnapshot) {\n                snapshot.dirty = saveable.createSnapshot();\n            }\n            if (saveable.revert) {\n                await saveable.revert({ soft: true });\n            }\n        }\n        this.moveSnapshots.set(newResourceUri.toString(), snapshot);\n    }\n\n    protected async revertMove(resourceUri: URI, widget: NavigatableWidget, event: UserFileOperationEvent): Promise<void> {\n        const newResourceUri = this.createMoveToUri(resourceUri, widget, event);\n        if (!newResourceUri) {\n            return;\n        }\n        const snapshot = this.popMoveSnapshot(newResourceUri);\n        this.applyMoveSnapshot(widget, snapshot);\n    }\n\n    protected async applyMove(resourceUri: URI, widget: NavigatableWidget, event: UserFileOperationEvent): Promise<void> {\n        const newResourceUri = this.createMoveToUri(resourceUri, widget, event);\n        if (!newResourceUri) {\n            return;\n        }\n\n        const snapshot = this.popMoveSnapshot(newResourceUri);\n\n        const description = this.widgetManager.getDescription(widget);\n        if (!description) {\n            return;\n        }\n        const { factoryId, options } = description;\n        if (!NavigatableWidgetOptions.is(options)) {\n            return;\n        }\n\n        const newWidget = await this.widgetManager.getOrCreateWidget<NavigatableWidget>(factoryId, <NavigatableWidgetOptions>{\n            ...options,\n            uri: newResourceUri.toString()\n        });\n        this.applyMoveSnapshot(newWidget, snapshot);\n        const area = this.shell.getAreaFor(widget) || 'main';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const pending: Promise<any>[] = [this.shell.addWidget(newWidget, {\n            area, ref: widget\n        })];\n        if (this.shell.activeWidget === widget) {\n            pending.push(this.shell.activateWidget(newWidget.id));\n        } else if (widget.isVisible) {\n            pending.push(this.shell.revealWidget(newWidget.id));\n        }\n        pending.push(this.shell.closeWidget(widget.id, { save: false }));\n        await Promise.all(pending);\n    }\n\n    protected createMoveToUri(resourceUri: URI, widget: NavigatableWidget, event: UserFileOperationEvent): URI | undefined {\n        if (event.operation !== FileOperation.MOVE) {\n            return undefined;\n        }\n        const path = event.source?.relative(resourceUri);\n        const targetUri = path && event.target.resolve(path);\n        return targetUri && widget.createMoveToUri(targetUri);\n    }\n\n    protected readonly deletedSuffix = ' (deleted from disk)';\n    protected async updateWidgets(event: FileChangesEvent): Promise<void> {\n        if (!event.gotDeleted() && !event.gotAdded()) {\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const pending: Promise<any>[] = [];\n\n        const dirty = new Set<string>();\n        const toClose = new Map<string, NavigatableWidget[]>();\n        for (const [uri, widget] of NavigatableWidget.get(this.shell.widgets)) {\n            this.updateWidget(uri, widget, event, { dirty, toClose });\n        }\n        for (const [uriString, widgets] of toClose.entries()) {\n            if (!dirty.has(uriString)) {\n                for (const widget of widgets) {\n                    widget.close();\n                    pending.push(waitForClosed(widget));\n                }\n            }\n        }\n\n        await Promise.all(pending);\n    }\n    protected updateWidget(uri: URI, widget: NavigatableWidget, event: FileChangesEvent, { dirty, toClose }: {\n        dirty: Set<string>;\n        toClose: Map<string, NavigatableWidget[]>\n    }): void {\n        const label = widget.title.label;\n        const deleted = label.endsWith(this.deletedSuffix);\n        if (event.contains(uri, FileChangeType.DELETED)) {\n            const uriString = uri.toString();\n            if (Saveable.isDirty(widget)) {\n                if (!deleted) {\n                    widget.title.label += this.deletedSuffix;\n                }\n                dirty.add(uriString);\n            }\n            const widgets = toClose.get(uriString) || [];\n            widgets.push(widget);\n            toClose.set(uriString, widgets);\n        } else if (event.contains(uri, FileChangeType.ADDED)) {\n            if (deleted) {\n                widget.title.label = widget.title.label.substr(0, label.length - this.deletedSuffix.length);\n            }\n        }\n    }\n\n    protected updateAssociations(): void {\n        const fileAssociations = this.preferences['files.associations'];\n        const mimeAssociations = Object.keys(fileAssociations).map(filepattern => ({ id: fileAssociations[filepattern], filepattern }));\n        this.mimeService.setAssociations(mimeAssociations);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable max-len */\n\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-protocol';\nimport { ApplicationError } from '@theia/core/lib/common';\n\n/**\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService` instead\n */\nexport const FileSystem = Symbol('FileSystem');\nexport interface FileSystem {\n\n    /**\n     * Returns the file stat for the given URI.\n     *\n     * If the uri points to a folder it will contain one level of unresolved children.\n     *\n     * `undefined` if a file for the given URI does not exist.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.resolve` instead\n     */\n    getFileStat(uri: string): Promise<FileStat | undefined>;\n\n    /**\n     * Finds out if a file identified by the resource exists.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.exists` instead\n     */\n    exists(uri: string): Promise<boolean>;\n\n    /**\n     * Resolve the contents of a file identified by the resource.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.read` instead\n     */\n    resolveContent(uri: string, options?: { encoding?: string }): Promise<{ stat: FileStat, content: string }>;\n\n    /**\n     * Updates the content replacing its previous value.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.write` instead\n     */\n    setContent(file: FileStat, content: string, options?: { encoding?: string }): Promise<FileStat>;\n\n    /**\n     * Updates the content replacing its previous value.\n     *\n     * The optional parameter `overwriteEncoding` can be used to transform the encoding of a file.\n     *\n     * |   | encoding | overwriteEncoding | behaviour |\n     * |---|----------|-------------------|-----------|\n     * | 1 | undefined |    undefined     | read & write file in default encoding |\n     * | 2 | undefined |        ✓         | read file in default encoding; write file in `overwriteEncoding` |\n     * | 3 |     ✓    |     undefined     | read & write file in `encoding` |\n     * | 4 |     ✓    |        ✓         | read file in `encoding`; write file in `overwriteEncoding` |\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.write` instead\n     */\n    updateContent(file: FileStat, contentChanges: TextDocumentContentChangeEvent[], options?: { encoding?: string, overwriteEncoding?: string }): Promise<FileStat>;\n\n    /**\n     * Moves the file to a new path identified by the resource.\n     *\n     * The optional parameter overwrite can be set to replace an existing file at the location.\n     *\n     * |           | missing | file | empty dir |    dir    |\n     * |-----------|---------|------|-----------|-----------|\n     * | missing   |    x    |   x  |     x     |     x     |\n     * | file      |    ✓    |   x  |     x     |     x     |\n     * | empty dir |    ✓    |   x  |     x     | overwrite |\n     * | dir       |    ✓    |   x  | overwrite | overwrite |\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.move` instead\n     */\n    move(sourceUri: string, targetUri: string, options?: FileMoveOptions): Promise<FileStat>;\n\n    /**\n     * Copies the file to a path identified by the resource.\n     *\n     * The optional parameter overwrite can be set to replace an existing file at the location.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.copy` instead\n     */\n    copy(sourceUri: string, targetUri: string, options?: { overwrite?: boolean, recursive?: boolean }): Promise<FileStat>;\n\n    /**\n     * Creates a new file with the given path. The returned promise\n     * will have the stat model object as a result.\n     *\n     * The optional parameter content can be used as value to fill into the new file.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.create` instead\n     */\n    createFile(uri: string, options?: { content?: string, encoding?: string }): Promise<FileStat>;\n\n    /**\n     * Creates a new folder with the given path. The returned promise\n     * will have the stat model object as a result.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.createFolder` instead\n     */\n    createFolder(uri: string): Promise<FileStat>;\n\n    /**\n     * Creates a new empty file if the given path does not exist and otherwise\n     * will set the mtime and atime of the file to the current date.\n     */\n    touchFile(uri: string): Promise<FileStat>;\n\n    /**\n     * Deletes the provided file. The optional moveToTrash parameter allows to\n     * move the file to trash.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.delete` instead\n     */\n    delete(uri: string, options?: FileDeleteOptions): Promise<void>;\n\n    /**\n     * Returns the encoding of the given file resource.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908) use `FileService.read` without `autoGuessEncoding` option instead\n     */\n    getEncoding(uri: string): Promise<string>;\n\n    /**\n     * Guess encoding of a given file based on its content.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.read` with `autoGuessEncoding` option instead\n     */\n    guessEncoding(uri: string): Promise<string | undefined>;\n\n    /**\n     * Return list of available roots.\n     */\n    getRoots(): Promise<FileStat[]>;\n\n    /**\n     * Returns a promise that resolves to a file stat representing the current user's home directory.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `EnvVariablesServer.getHomeDirUri` instead\n     */\n    getCurrentUserHome(): Promise<FileStat | undefined>;\n\n    /**\n     * Resolves to an array of URIs pointing to the available drives on the filesystem.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `EnvVariablesServer.getDrives` instead\n     */\n    getDrives(): Promise<string[]>;\n\n    /**\n     * Tests a user's permissions for the file or directory specified by URI.\n     * The mode argument is an optional integer that specifies the accessibility checks to be performed.\n     * Check `FileAccess.Constants` for possible values of mode.\n     * It is possible to create a mask consisting of the bitwise `OR` of two or more values (e.g. FileAccess.Constants.W_OK | FileAccess.Constants.R_OK).\n     * If `mode` is not defined, `FileAccess.Constants.F_OK` will be used instead.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.access` instead\n     */\n    access(uri: string, mode?: number): Promise<boolean>\n\n    /**\n     * Returns the path of the given file URI, specific to the backend's operating system.\n     * If the URI is not a file URI, undefined is returned.\n     *\n     * USE WITH CAUTION: You should always prefer URIs to paths if possible, as they are\n     * portable and platform independent. Paths should only be used in cases you directly\n     * interact with the OS, e.g. when running a command on the shell.\n     *\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.fsPath` instead\n     */\n    getFsPath(uri: string): Promise<string | undefined>\n}\n\n/**\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileService.access` instead\n */\nexport namespace FileAccess {\n\n    export namespace Constants {\n\n        /**\n         * Flag indicating that the file is visible to the calling process.\n         * This is useful for determining if a file exists, but says nothing about rwx permissions. Default if no mode is specified.\n         */\n        export const F_OK: number = 0;\n\n        /**\n         * Flag indicating that the file can be read by the calling process.\n         */\n        export const R_OK: number = 4;\n\n        /**\n         * Flag indicating that the file can be written by the calling process.\n         */\n        export const W_OK: number = 2;\n\n        /**\n         * Flag indicating that the file can be executed by the calling process.\n         * This has no effect on Windows (will behave like `FileAccess.F_OK`).\n         */\n        export const X_OK: number = 1;\n\n    }\n\n}\n\nexport interface FileMoveOptions {\n    overwrite?: boolean;\n}\n\nexport interface FileDeleteOptions {\n    moveToTrash?: boolean\n}\n\n/**\n * A file resource with meta information.\n *\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileStat` from `@theia/filesystem/lib/common/files` instead\n */\nexport interface FileStat {\n\n    /**\n     * The URI of the file.\n     */\n    uri: string;\n\n    /**\n     * The last modification of this file.\n     */\n    lastModification: number;\n\n    /**\n     * `true` if the resource is a directory. Otherwise, `false`.\n     */\n    isDirectory: boolean;\n\n    /**\n     * The children of the file stat.\n     * If it is `undefined` and `isDirectory` is `true`, then this file stat is unresolved.\n     */\n    children?: FileStat[];\n\n    /**\n     * The size of the file if known.\n     */\n    size?: number;\n\n}\n\nexport namespace FileStat {\n    export function is(candidate: Object | undefined): candidate is FileStat {\n        return typeof candidate === 'object' && ('uri' in candidate) && ('lastModification' in candidate) && ('isDirectory' in candidate);\n    }\n\n    export function equals(one: object | undefined, other: object | undefined): boolean {\n        if (!one || !other || !is(one) || !is(other)) {\n            return false;\n        }\n        return one.uri === other.uri\n            && one.lastModification === other.lastModification\n            && one.isDirectory === other.isDirectory;\n    }\n}\n\n/**\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-theia/theia/pull/7908), use `FileOperationError` instead\n */\nexport namespace FileSystemError {\n    export const FileNotFound = ApplicationError.declare(-33000, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' has not been found.`,\n        data: { uri }\n    }));\n    export const FileExists = ApplicationError.declare(-33001, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' already exists.`,\n        data: { uri }\n    }));\n    export const FileIsDirectory = ApplicationError.declare(-33002, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' is a directory.`,\n        data: { uri }\n    }));\n    export const FileNotDirectory = ApplicationError.declare(-33003, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' is not a directory.`,\n        data: { uri }\n    }));\n    export const FileIsOutOfSync = ApplicationError.declare(-33004, (file: FileStat, stat: FileStat) => ({\n        message: `'${file.uri}' is out of sync.`,\n        data: { file, stat }\n    }));\n}\n"],"sourceRoot":""}